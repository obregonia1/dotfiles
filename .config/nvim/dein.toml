[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-unimpaired'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''
call ddu#custom#patch_global({
\   'ui': 'ff',
\   'sources': [
\     {
\       'name': 'file_rec',
\       'params': {
\         'ignoredDirectories': ['.git', 'node_modules', 'vendor']
\       }
\     },
\     { 'name': 'buffer' },
\     {'name':'file','params':{}}
\   ],
\   'sourceOptions': {
\     '_': {
\       'matchers': ['matcher_substring'],
\     },
\   },
\   'filterParams': {
\     'matcher_substring': {
\       'highlightMatched': 'Title',
\     },
\   },
\   'kindOptions': {
\     'file': {
\       'defaultAction': 'open',
\     },
\   },
\   'uiParams': {
\     'ff': {
\       'startFilter': v:true,
\       'prompt': '> ',
\     }
\   },
\ })


call ddu#custom#patch_local('grep', {
\   'sourceParams' : {
\     'rg' : {
\       'args': ['--column', '--no-heading', '--color', 'never'],
\     },
\   },
\   'uiParams': {
\     'filer': {
\       'startFilter': v:false,
\     }
\   },
\ })

autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
    \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>

  nnoremap <buffer><silent> <Space>
    \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>

  nnoremap <buffer><silent> a
    \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>

  nnoremap <buffer><silent> p
    \ <Cmd>call ddu#ui#ff#do_action('preview')<CR>

  nnoremap <buffer><silent> <Esc>
    \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  nnoremap <buffer> <CR>
  \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> q
  \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  inoremap <buffer> <CR>
  \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  inoremap <buffer><silent> <C-j>
  \ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')+1,0)")<CR>
  inoremap <buffer><silent> <C-k>
  \ <Cmd>call ddu#ui#ff#execute("call cursor(line('.')-1,0)")<CR>
endfunction

nmap <silent> ;f <Cmd>call ddu#start({})<CR>
nmap <silent> ;b <Cmd>call ddu#start({'sources': [{'name': 'buffer'}]})<CR>
nmap <silent> ;g <Cmd>call ddu#start({
\   'name': 'grep',
\   'volatile': v:true,
\   'sources': [{
\     'name': 'rg',
\     'options': {'matchers': []},
\   }],
\   'uiParams': {'ff': {
\     'ignoreEmpty': v:false,
\     'autoResize': v:false,
\   }},
\ })<CR>

"ddu keymapping.
nnoremap <SID>[ug] <Nop>
nmap ,u <SID>[ug]

nnoremap <silent> <SID>[ug]m :<C-u>Ddu mr<CR>
nnoremap <silent> <SID>[ug]b :<C-u>Ddu buffer<CR>
nnoremap <silent> <SID>[ug]r :<C-u>Ddu register<CR>
nnoremap <silent> <SID>[ug]n :<C-u>Ddu file -source-param-new -volatile<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-source-file'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-column-filename'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-commands.vim'

[[plugins]]
repo = 'Shun/ddu-source-rg'

[[plugins]]
repo = 'Shun/ddu-source-buffer'

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'

[[plugins]]
repo = 'preservim/nerdcommenter'
hook_add = '''
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign='left'
'''

[[plugins]]
repo = 'tpope/vim-endwise'

[[plugins]]
repo = 'airblade/vim-gitgutter'

#[[plugins]]
#repo = 'neovim/nvim-lspconfig'
#depends = ['mason.nvim', 'mason-lspconfig.nvim']
#on_ft = ['ruby', 'typescript', 'javascript']
#hook_add = '''
#lua <<EOF
#  local mason_lspconfig = require("mason")
#  require("mason-lspconfig").setup()
#
#  mason_lspconfig.setup({
#    ensure_installed = {
#      'tsserver',
#      'eslint',
#    },
#    automatic_installation = true,
#  })
#
#  -- Mappings.
#  -- See `:help vim.diagnostic.*` for documentation on any of the below functions
#  local opts = { noremap=true, silent=true }
#  vim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)
#  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
#  vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
#  vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)
#
#  local on_attach = function(client, bufnr)
#    -- Enable completion triggered by <c-x><c-o>
#    vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
#
#   end
#
#  local lsp_flags = {
#    debounce_text_changes = 150,
#  }
#  local lspconfig = require('lspconfig')
#  local servers = { 'solargraph', 'tsserver', 'vuels' }
#  for _, lsp in ipairs(servers) do
#    lspconfig[lsp].setup{
#        flags = {
#      debounce_text_changes = 150,
#      },
#    settings = {
#      solargraph = {
#        diagnostics = false,
#        commandPath = '/Users/kentaro/.asdf/shims/solargraph',
#        autostart = false
#      }
#    }
#    }
#  end
#EOF
#
#let g:LanguageClient_serverCommands = {
#        \ 'ruby': ['solargraph', 'stdio'],
#        \ }
#
#nnoremap <silent> gD <cmd>lua vim.lsp.buf.declaration()<CR>
#nnoremap <silent> gd <cmd>lua vim.lsp.buf.definition()<CR>
#nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<CR>
#nnoremap <silent> gi <cmd>lua vim.lsp.buf.implementation()<CR>
#nnoremap <silent> <C-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
#nnoremap <silent> <space>D <cmd>lua vim.lsp.buf.type_definition()<CR>
#nnoremap <silent> <space>rn <cmd>lua vim.lsp.buf.rename()<CR>
#nnoremap <silent> <space>ca <cmd>lua vim.lsp.buf.code_action()<CR>
#nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<CR>
#nnoremap <silent> <space>f <cmd>lua vim.lsp.buf.format({ async = true })<CR>
#'''
#
#[[plugins]]
#repo = 'williamboman/mason.nvim'
#
#[[plugins]]
#repo = 'williamboman/mason-lspconfig.nvim'
#depends = ['mason.nvim']

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = ['slim']

[[plugins]]
repo = 'mbbill/undotree'
